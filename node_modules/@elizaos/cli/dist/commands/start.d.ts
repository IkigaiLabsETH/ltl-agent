import { DatabaseAdapter, Character, IAgentRuntime, UUID, Plugin } from '@elizaos/core';
import express from 'express';
import http from 'node:http';
import { Server } from 'socket.io';
import { Command } from 'commander';

/**
 * Represents a function that acts as a server middleware.
 * @param {express.Request} req - The request object.
 * @param {express.Response} res - The response object.
 * @param {express.NextFunction} next - The next function to be called in the middleware chain.
 * @returns {void}
 */
type ServerMiddleware = (req: express.Request, res: express.Response, next: express.NextFunction) => void;
/**
 * Interface for defining server configuration options.
 * @typedef {Object} ServerOptions
 * @property {ServerMiddleware[]} [middlewares] - Optional array of server middlewares.
 * @property {string} [dataDir] - Optional directory for storing server data.
 * @property {string} [postgresUrl] - Optional URL for connecting to a PostgreSQL database.
 */
interface ServerOptions {
    middlewares?: ServerMiddleware[];
    dataDir?: string;
    postgresUrl?: string;
}
/**
 * Class representing an agent server.
 */ /**
* Represents an agent server which handles agents, database, and server functionalities.
*/
declare class AgentServer {
    app: express.Application;
    private agents;
    server: http.Server;
    socketIO: Server;
    private serverPort;
    isInitialized: boolean;
    database: DatabaseAdapter;
    startAgent: (character: Character) => Promise<IAgentRuntime>;
    stopAgent: (runtime: IAgentRuntime) => void;
    loadCharacterTryPath: (characterPath: string) => Promise<Character>;
    jsonToCharacter: (character: unknown) => Promise<Character>;
    /**
     * Constructor for AgentServer class.
     *
     * @constructor
     */
    constructor();
    /**
     * Initializes the database and server.
     *
     * @param {ServerOptions} [options] - Optional server options.
     * @returns {Promise<void>} A promise that resolves when initialization is complete.
     */
    initialize(options?: ServerOptions): Promise<void>;
    /**
     * Initializes the server with the provided options.
     *
     * @param {ServerOptions} [options] - Optional server options.
     * @returns {Promise<void>} - A promise that resolves once the server is initialized.
     */
    private initializeServer;
    /**
     * Registers an agent with the provided runtime.
     *
     * @param {IAgentRuntime} runtime - The runtime object containing agent information.
     * @throws {Error} if the runtime is null/undefined, if agentId is missing, if character configuration is missing,
     * or if there are any errors during registration.
     */
    registerAgent(runtime: IAgentRuntime): void;
    /**
     * Unregisters an agent from the system.
     *
     * @param {UUID} agentId - The unique identifier of the agent to unregister.
     * @returns {void}
     */
    unregisterAgent(agentId: UUID): void;
    /**
     * Add middleware to the server's request handling pipeline
     * @param {ServerMiddleware} middleware - The middleware function to be registered
     */
    registerMiddleware(middleware: ServerMiddleware): void;
    /**
     * Starts the server on the specified port.
     *
     * @param {number} port - The port number on which the server should listen.
     * @throws {Error} If the port is invalid or if there is an error while starting the server.
     */
    start(port: number): void;
    /**
     * Stops the server if it is running. Closes the server connection,
     * stops the database connection, and logs a success message.
     */
    stop(): Promise<void>;
}

/**
 * Analyzes project agents and their plugins to determine which environment variables to prompt for
 */
declare function promptForProjectPlugins(project: any, pluginToLoad?: {
    name: string;
}): Promise<void>;
/**
 * Starts an agent with the given character, agent server, initialization function, plugins, and options.
 *
 * @param character The character object representing the agent.
 * @param server The agent server where the agent will be registered.
 * @param init Optional initialization function to be called with the agent runtime.
 * @param plugins An array of plugins to be used by the agent.
 * @param options Additional options for starting the agent, such as data directory and postgres URL.
 * @returns A promise that resolves to the agent runtime object.
 */
declare function startAgent(character: Character, server: AgentServer, init?: (runtime: IAgentRuntime) => void, plugins?: Plugin[], options?: {
    dataDir?: string;
    postgresUrl?: string;
    isPluginTestMode?: boolean;
}): Promise<IAgentRuntime>;
declare const start: Command;

export { promptForProjectPlugins, start, startAgent };
