#!/usr/bin/env node

import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import {
  teeCommand
} from "./chunk-Z23AQP3I.js";
import {
  test
} from "./chunk-5EU55Q35.js";
import {
  start
} from "./chunk-IPMXNAUZ.js";
import "./chunk-MMXVGVEC.js";
import {
  create
} from "./chunk-Q7IRUYIE.js";
import "./chunk-DL5KPHCD.js";
import {
  dev
} from "./chunk-QXVIZ77H.js";
import {
  env
} from "./chunk-WZ2HLKRP.js";
import {
  plugins
} from "./chunk-3QNEGOV7.js";
import {
  publish
} from "./chunk-HKPWAGXM.js";
import {
  update
} from "./chunk-6FUKON44.js";
import {
  setupMonorepo
} from "./chunk-FJMBLQVG.js";
import {
  agent,
  displayBanner
} from "./chunk-RZ4QEERU.js";
import {
  Command
} from "./chunk-W4LNCUVN.js";
import "./chunk-LRSU7IN6.js";
import "./chunk-567UPUC7.js";

// src/index.ts
import { logger } from "@elizaos/core";
import fs from "node:fs";
import path, { dirname } from "node:path";
import { fileURLToPath } from "node:url";
process.env.NODE_OPTIONS = "--no-deprecation";
process.env.NODE_NO_WARNINGS = "1";
process.on("SIGINT", () => process.exit(0));
process.on("SIGTERM", () => process.exit(0));
async function main() {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);
  const packageJsonPath = path.resolve(__dirname, "../package.json");
  let version = "0.0.0";
  if (!fs.existsSync(packageJsonPath)) {
  } else {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, "utf-8"));
    version = packageJson.version;
  }
  const program = new Command().name("elizaos").version(version, "-v, --version", "output the version number");
  const stopCommand = new Command("stop").description("Stop all running ElizaOS agents running locally").action(async () => {
    logger.info("Stopping all ElizaOS agents...");
    try {
      await import("node:child_process").then(({ exec }) => {
        exec('pkill -f "node.*elizaos" || true', (error) => {
          if (error) {
            logger.error(`Error stopping processes: ${error.message}`);
          } else {
            logger.success("Server shutdown complete");
          }
        });
      });
    } catch (error) {
      logger.error(`Failed to stop processes: ${error.message}`);
    }
  });
  program.addCommand(create).addCommand(setupMonorepo).addCommand(plugins).addCommand(agent).addCommand(teeCommand).addCommand(start).addCommand(update).addCommand(test).addCommand(env).addCommand(dev).addCommand(publish).addCommand(stopCommand);
  if (process.argv.length === 2) {
    await displayBanner();
  }
  await program.parseAsync();
}
main().catch((error) => {
  logger.error("An error occurred:", error);
  process.exit(1);
});
