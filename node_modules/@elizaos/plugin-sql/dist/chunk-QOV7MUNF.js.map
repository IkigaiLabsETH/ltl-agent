{"version":3,"sources":["../src/pglite/manager.ts","../src/pg/manager.ts","../src/utils.ts"],"sourceRoot":"./","sourcesContent":["import { dirname as pathDirname, resolve as pathResolve } from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { PGlite, type PGliteOptions } from '@electric-sql/pglite';\nimport { fuzzystrmatch } from '@electric-sql/pglite/contrib/fuzzystrmatch';\nimport { vector } from '@electric-sql/pglite/vector';\nimport { logger } from '@elizaos/core';\nimport { drizzle } from 'drizzle-orm/pglite';\nimport { migrate } from 'drizzle-orm/pglite/migrator';\nimport type { IDatabaseClientManager } from '../types';\n\n/**\n * Class representing a database client manager for PGlite.\n * @implements { IDatabaseClientManager }\n */\nexport class PGliteClientManager implements IDatabaseClientManager<PGlite> {\n  private client: PGlite;\n  private shuttingDown = false;\n  private readonly shutdownTimeout = 500;\n\n  /**\n   * Constructor for creating a new instance of PGlite with the provided options.\n   * Initializes the PGlite client with additional extensions.\n   * @param {PGliteOptions} options - The options to configure the PGlite client.\n   */\n  constructor(options: PGliteOptions) {\n    this.client = new PGlite({\n      ...options,\n      extensions: {\n        vector,\n        fuzzystrmatch,\n      },\n    });\n    this.setupShutdownHandlers();\n  }\n\n  /**\n   * Retrieves the PostgreSQL lite connection.\n   *\n   * @returns {PGlite} The PostgreSQL lite connection.\n   * @throws {Error} If the client manager is currently shutting down.\n   */\n  public getConnection(): PGlite {\n    if (this.shuttingDown) {\n      throw new Error('Client manager is shutting down');\n    }\n    return this.client;\n  }\n\n  /**\n   * Initiates a graceful shutdown of the PGlite client.\n   * Checks if the client is already in the process of shutting down.\n   * Logs the start of shutdown process and sets shuttingDown flag to true.\n   * Sets a timeout for the shutdown process and forces closure of database connection if timeout is reached.\n   * Handles the shutdown process, closes the client connection, clears the timeout, and logs the completion of shutdown.\n   * Logs any errors that occur during the shutdown process.\n   */\n  private async gracefulShutdown() {\n    if (this.shuttingDown) {\n      return;\n    }\n\n    this.shuttingDown = true;\n    logger.info('Starting graceful shutdown of PGlite client...');\n\n    const timeout = setTimeout(() => {\n      logger.warn('Shutdown timeout reached, forcing database connection closure...');\n      this.client.close().finally(() => {\n        logger.warn('Forced database connection closure complete.');\n        if (process.env.NODE_ENV !== 'test') {\n          process.exit(1);\n        }\n      });\n    }, this.shutdownTimeout);\n\n    try {\n      await this.client.close();\n      clearTimeout(timeout);\n      logger.info('PGlite client shutdown completed successfully');\n      if (process.env.NODE_ENV !== 'test') {\n        process.exit(0);\n      }\n    } catch (error) {\n      logger.error('Error during graceful shutdown:', error);\n      if (process.env.NODE_ENV !== 'test') {\n        process.exit(1);\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Sets up shutdown handlers for SIGINT, SIGTERM, and beforeExit events to gracefully shutdown the application.\n   * @private\n   */\n  private setupShutdownHandlers() {\n    process.on('SIGINT', async () => {\n      await this.gracefulShutdown();\n    });\n\n    process.on('SIGTERM', async () => {\n      await this.gracefulShutdown();\n    });\n\n    process.on('beforeExit', async () => {\n      await this.gracefulShutdown();\n    });\n  }\n\n  /**\n   * Initializes the client for PGlite.\n   *\n   * @returns {Promise<void>} A Promise that resolves when the client is initialized successfully\n   */\n  public async initialize(): Promise<void> {\n    try {\n      await this.client.waitReady;\n      logger.info('PGlite client initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize PGlite client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Asynchronously closes the resource. If the resource is not already shutting down,\n   * it performs a graceful shutdown before closing.\n   *\n   * @returns A promise that resolves once the resource has been closed.\n   */\n  public async close(): Promise<void> {\n    if (!this.shuttingDown) {\n      await this.gracefulShutdown();\n    }\n  }\n\n  /**\n   * Check if the system is currently shutting down.\n   *\n   * @returns {boolean} True if the system is shutting down, false otherwise.\n   */\n  public isShuttingDown(): boolean {\n    return this.shuttingDown;\n  }\n\n  /**\n   * Asynchronously runs database migrations using Drizzle.\n   *\n   * Drizzle will first check if the migrations are already applied.\n   * If there is a diff between database schema and migrations, it will apply the migrations.\n   * If they are already applied, it will skip them.\n   *\n   * @returns {Promise<void>} A Promise that resolves once the migrations are completed successfully.\n   */\n  async runMigrations(): Promise<void> {\n    try {\n      const db = drizzle(this.client);\n\n      const packageJsonUrl = await import.meta.resolve('@elizaos/plugin-sql/package.json');\n      const packageJsonPath = fileURLToPath(packageJsonUrl);\n      const packageRoot = pathDirname(packageJsonPath);\n      const migrationsPath = pathResolve(packageRoot, 'drizzle/migrations');\n      logger.debug(\n        `Resolved migrations path (pglite) using import.meta.resolve: ${migrationsPath}`\n      );\n\n      await migrate(db, {\n        migrationsFolder: migrationsPath,\n        migrationsSchema: 'public',\n      });\n    } catch (error) {\n      logger.error('Failed to run database migrations (pglite):', error);\n    }\n  }\n}\n","import path from 'node:path';\nimport { fileURLToPath } from 'node:url';\nimport { logger } from '@elizaos/core';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport { migrate } from 'drizzle-orm/node-postgres/migrator';\nimport pkg, { type Pool as PgPool } from 'pg';\nimport type { IDatabaseClientManager } from '../types';\n\nconst { Pool } = pkg;\n\n/**\n * Manages connections to a PostgreSQL database using a connection pool.\n * Implements IDatabaseClientManager interface.\n */\n\nexport class PostgresConnectionManager implements IDatabaseClientManager<PgPool> {\n  private pool: PgPool;\n  private isShuttingDown = false;\n  private readonly connectionTimeout: number = 5000;\n\n  /**\n   * Constructor for creating a connection pool.\n   * @param {string} connectionString - The connection string used to connect to the database.\n   */\n  constructor(connectionString: string) {\n    const defaultConfig = {\n      max: 20,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: this.connectionTimeout,\n    };\n\n    this.pool = new Pool({\n      ...defaultConfig,\n      connectionString,\n    });\n\n    this.pool.on('error', (err) => {\n      logger.error('Unexpected pool error', err);\n      this.handlePoolError(err);\n    });\n\n    this.setupPoolErrorHandling();\n    this.testConnection();\n  }\n\n  /**\n   * Handles a pool error by attempting to reconnect the pool.\n   *\n   * @param {Error} error The error that occurred in the pool.\n   * @throws {Error} If failed to reconnect the pool.\n   */\n  private async handlePoolError(error: Error) {\n    logger.error('Pool error occurred, attempting to reconnect', {\n      error: error.message,\n    });\n\n    try {\n      await this.pool.end();\n\n      this.pool = new Pool({\n        ...this.pool.options,\n        connectionTimeoutMillis: this.connectionTimeout,\n      });\n\n      await this.testConnection();\n      logger.success('Pool reconnection successful');\n    } catch (reconnectError) {\n      logger.error('Failed to reconnect pool', {\n        error: reconnectError instanceof Error ? reconnectError.message : String(reconnectError),\n      });\n      throw reconnectError;\n    }\n  }\n\n  /**\n   * Asynchronously tests the database connection by executing a query to get the current timestamp.\n   *\n   * @returns {Promise<boolean>} - A Promise that resolves to true if the database connection test is successful.\n   */\n  async testConnection(): Promise<boolean> {\n    let client: pkg.PoolClient | null = null;\n    try {\n      client = await this.pool.connect();\n      const result = await client.query('SELECT NOW()');\n      logger.success('Database connection test successful:', result.rows[0]);\n      return true;\n    } catch (error) {\n      logger.error('Database connection test failed:', error);\n      throw new Error(`Failed to connect to database: ${(error as Error).message}`);\n    } finally {\n      if (client) client.release();\n    }\n  }\n\n  /**\n   * Sets up event listeners to handle pool cleanup on SIGINT, SIGTERM, and beforeExit events.\n   */\n  private setupPoolErrorHandling() {\n    process.on('SIGINT', async () => {\n      await this.cleanup();\n      process.exit(0);\n    });\n\n    process.on('SIGTERM', async () => {\n      await this.cleanup();\n      process.exit(0);\n    });\n\n    process.on('beforeExit', async () => {\n      await this.cleanup();\n    });\n  }\n\n  /**\n   * Get the connection pool.\n   * @returns {PgPool} The connection pool\n   * @throws {Error} If the connection manager is shutting down or an error occurs when trying to get the connection from the pool\n   */\n  public getConnection(): PgPool {\n    if (this.isShuttingDown) {\n      throw new Error('Connection manager is shutting down');\n    }\n\n    try {\n      return this.pool;\n    } catch (error) {\n      logger.error('Failed to get connection from pool:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Asynchronously acquires a database client from the connection pool.\n   *\n   * @returns {Promise<pkg.PoolClient>} A Promise that resolves with the acquired database client.\n   * @throws {Error} If an error occurs while acquiring the database client.\n   */\n  public async getClient(): Promise<pkg.PoolClient> {\n    try {\n      return await this.pool.connect();\n    } catch (error) {\n      logger.error('Failed to acquire a database client:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initializes the PostgreSQL connection manager by testing the connection and logging the result.\n   *\n   * @returns {Promise<void>} A Promise that resolves once the manager is successfully initialized\n   * @throws {Error} If there is an error initializing the connection manager\n   */\n  public async initialize(): Promise<void> {\n    try {\n      await this.testConnection();\n      logger.debug('PostgreSQL connection manager initialized successfully');\n    } catch (error) {\n      logger.error('Failed to initialize connection manager:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Asynchronously close the current process by executing a cleanup function.\n   * @returns A promise that resolves once the cleanup is complete.\n   */\n  public async close(): Promise<void> {\n    await this.cleanup();\n  }\n\n  /**\n   * Cleans up and closes the database pool.\n   * @returns {Promise<void>} A Promise that resolves when the database pool is closed.\n   */\n  async cleanup(): Promise<void> {\n    try {\n      await this.pool.end();\n      logger.info('Database pool closed');\n    } catch (error) {\n      logger.error('Error closing database pool:', error);\n    }\n  }\n\n  /**\n   * Asynchronously runs database migrations using the Drizzle library.\n   *\n   * Drizzle will first check if the migrations are already applied.\n   * If there is a diff between database schema and migrations, it will apply the migrations.\n   * If they are already applied, it will skip them.\n   *\n   * @returns {Promise<void>} A Promise that resolves once the migrations are completed successfully.\n   */\n  async runMigrations(): Promise<void> {\n    try {\n      const db = drizzle(this.pool);\n\n      const packageJsonUrl = await import.meta.resolve('@elizaos/plugin-sql/package.json');\n      const packageJsonPath = fileURLToPath(packageJsonUrl);\n      const packageRoot = path.dirname(packageJsonPath);\n      const migrationsPath = path.resolve(packageRoot, 'drizzle/migrations');\n      logger.debug(`Resolved migrations path (pg) using import.meta.resolve: ${migrationsPath}`);\n\n      await migrate(db, {\n        migrationsFolder: migrationsPath,\n        migrationsSchema: 'public',\n      });\n    } catch (error) {\n      logger.error('Failed to run database migrations (pg):', error);\n    }\n  }\n}\n","import dotenv from 'dotenv';\nimport { existsSync } from 'node:fs';\nimport path from 'node:path';\n\n/**\n * Expands a file path starting with `~` to the project directory.\n *\n * @param filepath - The path to expand.\n * @returns The expanded path.\n */\nexport function expandTildePath(filepath: string): string {\n  if (filepath && filepath.startsWith('~')) {\n    return path.join(process.cwd(), filepath.slice(1));\n  }\n  return filepath;\n}\n\n/**\n * Resolves the path to the nearest `.env` file.\n *\n * If no `.env` file is found when traversing up from the starting directory,\n * a path to `.env` in the starting directory is returned.\n *\n * @param startDir - The directory to start searching from. Defaults to the\n *   current working directory.\n * @returns The resolved path to the `.env` file.\n */\nexport function resolveEnvFile(startDir: string = process.cwd()): string {\n  let currentDir = startDir;\n\n  while (true) {\n    const candidate = path.join(currentDir, '.env');\n    if (existsSync(candidate)) {\n      return candidate;\n    }\n\n    const parentDir = path.dirname(currentDir);\n    if (parentDir === currentDir) {\n      break;\n    }\n    currentDir = parentDir;\n  }\n\n  return path.join(startDir, '.env');\n}\n\n/**\n * Resolves the directory used for PGlite database storage.\n *\n * Resolution order:\n * 1. The `dir` argument if provided.\n * 2. The `PGLITE_DATA_DIR` environment variable.\n * 3. The `fallbackDir` argument if provided.\n * 4. `./.elizadb` relative to the current working directory.\n *\n * @param dir - Optional directory preference.\n * @param fallbackDir - Optional fallback directory when env var is not set.\n * @returns The resolved data directory with any tilde expanded.\n */\nexport function resolvePgliteDir(dir?: string, fallbackDir?: string): string {\n  const envPath = resolveEnvFile();\n  if (existsSync(envPath)) {\n    dotenv.config({ path: envPath });\n  }\n\n  const base =\n    dir ?? process.env.PGLITE_DATA_DIR ?? fallbackDir ?? path.join(process.cwd(), '.elizadb');\n  return expandTildePath(base);\n}\n"],"mappings":"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","names":["fileURLToPath","logger","drizzle","migrate","logger","drizzle","fileURLToPath","migrate","path","path"]}