{"version":3,"sources":["../src/migrate.ts"],"sourceRoot":"./","sourcesContent":["import { logger } from '@elizaos/core';\nimport { config } from 'dotenv';\nimport { PostgresConnectionManager } from './pg/manager';\nimport { PGliteClientManager } from './pglite/manager';\nimport { resolvePgliteDir } from './utils';\n\nconfig({ path: '../../.env' });\n\n/**\n * Executes database migrations using either PostgreSQL or PGlite, depending on environment configuration.\n *\n * If the `POSTGRES_URL` environment variable is set, migrations are run against the specified PostgreSQL database. Otherwise, migrations are run using a PGlite database, with the data directory determined by the `PGLITE_DATA_DIR` environment variable or a project-specific default path.\n *\n * @remark This function terminates the Node.js process upon completion or failure.\n */\nasync function runMigrations() {\n  if (process.env.POSTGRES_URL) {\n    try {\n      const connectionManager = new PostgresConnectionManager(process.env.POSTGRES_URL);\n      await connectionManager.initialize();\n      await connectionManager.runMigrations();\n      // await connectionManager.close();\n      logger.success('PostgreSQL migrations completed successfully');\n      process.exit(0);\n    } catch (error) {\n      logger.warn('PostgreSQL migration failed:', error);\n      process.exit(1);\n    }\n  } else {\n    const elizaDbDir = resolvePgliteDir();\n\n    if (!process.env.PGLITE_DATA_DIR) {\n      logger.info(`PGLITE_DATA_DIR not set, defaulting to project path: ${elizaDbDir}`);\n    } else {\n      logger.info(`Using PGLITE_DATA_DIR: ${elizaDbDir}`);\n    }\n\n    logger.info('Using PGlite database at:', elizaDbDir);\n    const clientManager = new PGliteClientManager({\n      dataDir: elizaDbDir,\n    });\n\n    try {\n      await clientManager.initialize();\n      await clientManager.runMigrations();\n      logger.success('PGlite migrations completed successfully');\n      await clientManager.close();\n      process.exit(0);\n    } catch (error) {\n      logger.error('PGlite migration failed:', error);\n      try {\n        await clientManager.close();\n      } catch (closeError) {\n        logger.error('Failed to close PGlite connection:', closeError);\n      }\n      process.exit(1);\n    }\n  }\n}\n\nrunMigrations().catch((error) => {\n  logger.error('Unhandled error in migrations:', error);\n  process.exit(1);\n});\n"],"mappings":";;;;;;;;AAAA,SAAS,cAAc;AACvB,SAAS,cAAc;AAKvB,OAAO,EAAE,MAAM,aAAa,CAAC;AAS7B,eAAe,gBAAgB;AAC7B,MAAI,QAAQ,IAAI,cAAc;AAC5B,QAAI;AACF,YAAM,oBAAoB,IAAI,0BAA0B,QAAQ,IAAI,YAAY;AAChF,YAAM,kBAAkB,WAAW;AACnC,YAAM,kBAAkB,cAAc;AAEtC,aAAO,QAAQ,8CAA8C;AAC7D,cAAQ,KAAK,CAAC;AAAA,IAChB,SAAS,OAAO;AACd,aAAO,KAAK,gCAAgC,KAAK;AACjD,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF,OAAO;AACL,UAAM,aAAa,iBAAiB;AAEpC,QAAI,CAAC,QAAQ,IAAI,iBAAiB;AAChC,aAAO,KAAK,wDAAwD,UAAU,EAAE;AAAA,IAClF,OAAO;AACL,aAAO,KAAK,0BAA0B,UAAU,EAAE;AAAA,IACpD;AAEA,WAAO,KAAK,6BAA6B,UAAU;AACnD,UAAM,gBAAgB,IAAI,oBAAoB;AAAA,MAC5C,SAAS;AAAA,IACX,CAAC;AAED,QAAI;AACF,YAAM,cAAc,WAAW;AAC/B,YAAM,cAAc,cAAc;AAClC,aAAO,QAAQ,0CAA0C;AACzD,YAAM,cAAc,MAAM;AAC1B,cAAQ,KAAK,CAAC;AAAA,IAChB,SAAS,OAAO;AACd,aAAO,MAAM,4BAA4B,KAAK;AAC9C,UAAI;AACF,cAAM,cAAc,MAAM;AAAA,MAC5B,SAAS,YAAY;AACnB,eAAO,MAAM,sCAAsC,UAAU;AAAA,MAC/D;AACA,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EACF;AACF;AA3Ce;AA6Cf,cAAc,EAAE,MAAM,CAAC,UAAU;AAC/B,SAAO,MAAM,kCAAkC,KAAK;AACpD,UAAQ,KAAK,CAAC;AAChB,CAAC;","names":[]}