import {
  PGliteClientManager,
  PostgresConnectionManager,
  __name,
  resolvePgliteDir
} from "./chunk-QOV7MUNF.js";

// src/migrate.ts
import { logger } from "@elizaos/core";
import { config } from "dotenv";
config({ path: "../../.env" });
async function runMigrations() {
  if (process.env.POSTGRES_URL) {
    try {
      const connectionManager = new PostgresConnectionManager(process.env.POSTGRES_URL);
      await connectionManager.initialize();
      await connectionManager.runMigrations();
      logger.success("PostgreSQL migrations completed successfully");
      process.exit(0);
    } catch (error) {
      logger.warn("PostgreSQL migration failed:", error);
      process.exit(1);
    }
  } else {
    const elizaDbDir = resolvePgliteDir();
    if (!process.env.PGLITE_DATA_DIR) {
      logger.info(`PGLITE_DATA_DIR not set, defaulting to project path: ${elizaDbDir}`);
    } else {
      logger.info(`Using PGLITE_DATA_DIR: ${elizaDbDir}`);
    }
    logger.info("Using PGlite database at:", elizaDbDir);
    const clientManager = new PGliteClientManager({
      dataDir: elizaDbDir
    });
    try {
      await clientManager.initialize();
      await clientManager.runMigrations();
      logger.success("PGlite migrations completed successfully");
      await clientManager.close();
      process.exit(0);
    } catch (error) {
      logger.error("PGlite migration failed:", error);
      try {
        await clientManager.close();
      } catch (closeError) {
        logger.error("Failed to close PGlite connection:", closeError);
      }
      process.exit(1);
    }
  }
}
__name(runMigrations, "runMigrations");
runMigrations().catch((error) => {
  logger.error("Unhandled error in migrations:", error);
  process.exit(1);
});
//# sourceMappingURL=migrate.js.map